> creating a custom directive in angular

$ ng generate directive directivename
			or
 	ng g d exampletwo

exampletwo.direcive.ts
-----------------------
import { Directive } from '@angular/core';

@Directive({
  selector: '[appExampletwo]'
})
export class ExampletwoDirective {

  constructor() { }

}


add the selector to a dom element to get
refernbce to it.

app.component.html
-------------------

<button class="btn btn-primary" appExampletwo></button>

here v set the reference to button.

now we can style the button by using ElementRef attribute.

examletwo.drective.ts
-------------------
export class ExampletwoDirective implements OnInit {

  constructor(private elRef: ElementRef) {}
    
  ngOnInit(){
     this.elRef.nativeElement.style.width= "600px";

  }
}

select the underlying elmeent of elementref and change its style here.



In above method, v assign the style to the element directly using style attribute. it is not good practoce.

in angular v dont use dom attributes like this.
instead use a class called Renderer2 to render the dom elements.

Example:
------------

// import Renderer2 from core
import { Directive, ElementRef, Renderer2, OnInit } from '@angular/core';

@Directive({
  selector: '[appBetterHighlight]'
})
export class BetterHighlightDirective implements OnInit{
	
  // create a renderer property of type Renderer2
  constructor(private elementRef: ElementRef, private renderer: Renderer2 ) { }
  
  ngOnInit(){

    const e = this.elementRef.nativeElement
    // use renderer to set style for the selected element.
    // get setStyle() method for this.
    this.renderer.setStyle(e, "background-color", "blue");
    this.renderer.setStyle(e, 'border', '5px solid green');
    this.renderer.setStyle(e, "padding", '2rem');
  }
  
}

// syntax
// this.renderer.setStyle(element selected, property, value)

// so here v use Renderer2 to do rendering.


app.component.html
--------------
 <p appBetterHighlight>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laudantium aut, accusantium temporibus ipsam laborum et odio dolor voluptates ullam hic numquam soluta tenetur minima optio aspernatur animi, veritatis commodi repudiandae.</p>

 -- use appBetterHighlight selector to refer to the element.




Other renderer2 methods
---------------
 // removeStyle() to remove a style from element
    this.renderer.removeStyle(e, "font-weight");

    // remove Class() of selected element,
    this.renderer.removeClass(e, "para-1");




HostListener Decorator
-------------------------

> to make the dom elements more dynamic based on user events
> here v set styles basedon two mouse vents

  // hostlistener to change background of element when v hover over mouse
  @HostListener('mouseenter') MouseEnter(eventData: Event){
    this.renderer.setStyle(this.elementRef.nativeElement
      , 'background-color', 'blue'); 
  }

  // hostlistener to change background of element when v leave the mouse
  @HostListener("mouseleave") MouseLeave(eventData: Event){
    this.renderer.setStyle(this.elementRef.nativeElement, "background-color", "transparent")
  }

> here mouseenter and mouseleave mouse events in dom.
> when v trigegr any of two events, corresponding method is executed whihv gets 
> thE EVENT DATA PASSED. of type Event
> and based on this, v set the style for the element.


syntax:
	@HostListener('event') function(eventdata: Event){
		//code
	}



HostBinding Decorator
--------------------



> Host Binding,
> no need to set an element reference, set the directive on dom element.
> syntax:	
> @HostBinding('property two change') propertyname: type;
 

@Directive({
  selector: '[appAppHostBinding]'
})

  @HostBinding('style.backgroundColor') elementBg: string;
  @HostBinding('style.padding') elementPd: string;
  @HostBinding('textContent') elementText: string = "put some value here";

  @HostListener('mouseenter') mouseFunc(getEvData: Event){
    // use hostbinding property to change the background color and padding while mouse hover.
      this.elementBg = "dodgerblue";
      this.elementPd = "2rem";
      this.elementText = "Hello World!"
  } 
  @HostListener("mouseleave") mouseFuncN(getEvData: Event){
    // same goes here while leave mouse - change bg and padding
      this.elementBg ="transparent";
      this.elementPd = "1rem";
      this.elementText = "Welcome to Programming!"
  }


app.component.html
--------------------------
 <p appAppHostBinding style="border: 3px solid grey;">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Corporis, veritatis.</p>

> the above changes r applied on this selected element while v mouse hover and mouse leave.




using custom propety binding om hostlistener and hostbinding
----------------------------------------------------


>here v set a style directly from view and use input directive to
acces them from view and apply those on hostlistener.


@Directive({
  selector: '[appCutstomPropertyBinding]'
})
export class CutstomPropertyBindingDirective implements OnInit{

  // set two input properties that gets a color from app component view
  @Input() defaultColor: string;
  @Input() highlightBg: string;

  constructor() { }
  ngOnInit(){}

  // hostbinding on background of element
  // can also set a initial bg color when page loads
  @HostBinding('style.backgroundColor') bgColor: string ="transparent";
  
  // while mouseenter execute function
  @HostListener('mouseenter') mouseFunc(eventData: Event){
    // set background color to a color received to defaultColor
    this.bgColor = this.defaultColor;
  }
  @HostListener('mouseleave') mouseNewFunc(eventData: Event){
    // set background color to a color received to highlightBg
    this.bgColor = this.highlightBg;
  }
}


app.component.html
-------------------
 <p appCutstomPropertyBinding [defaultColor]="'red'" 
       [highlightBg]="'green'">Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequatur dolore atque laborum perferendis tempora rem corporis amet provident optio, voluptate delectus aspernatur assumenda harum praesentium, deleniti sit deserunt porro molestiae?</p>

 defaultColor and highlightBg are the input proeprties v declared in ts file.
v assign two string values to it.

note: while assigning such use '' around it else it angular detect it as a 
property and causses errors.

> we can also do property binding without using [] enclosed on selected properties

eg:
	can use defaultColor="yellow" instead of [defaultColor]="'yellow'"

eg2:
	defaultBorder="2px solid yellow"
			or

	[defaultBorder]="'2px solid yellow'"


both having same effect on page.



building custom structural directive
----------------------------------

create a directive file
---------------------

unless.directive.ts
-----------------
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';

@Directive({
  selector: '[appUnless]'
})

export class UnlessDirective {
  // get a condition as input- when codition change
  // we execute a method - gives a setter before
  // unless property usng set keyword.
  
  @Input() set appUnless(condition: boolean){
    if (condition) {
      // if condition true - attach a referenced template to vcRef
      this.vcRef.createEmbeddedView(this.templateRef);
    } else {
      // clear all views in vcRef.
      this.vcRef.clear()
    }
  }

  // pass propertie templateRef, viewcontainer ref
  constructor(private templateRef: TemplateRef<any>,
              private vcRef: ViewContainerRef) { 

              }

}

TemplateRef: to get reference to a template
ViewContainerRef: where v render the template.


> here input property name and selector should be same. ie appUnless

app.component.ts
--------------
export class AppComponent {
  title = 'directives-app';
  dummyData: boolean = true;
}

give a dummyData ot type boolean


app.compomenet.html
---------------
<div class="row" *appUnless="dummyData">
    <h4>Building Custom Structural Directive</h4>
    <div class="col-md-12">
      <p style="border: 2px solid green;">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tenetur quos sint facilis, molestiae ipsum nobis illo aliquid, beatae deleniti harum, odit incidunt hic esse optio rerum repudiandae aperiam! Nam, ratione!</p>
    </div>
  </div>


 here appUnless custom struvutal directive recieves a dummyData value 
 which is set as true.

 and this data is received as inpout to property appUnless in unless.directive.ts
 and if true - template is rendered. else template is cleared.




ngSwitch
---------

a built in structual directive

app.component.ts
-------------
value: number = 10;

if change this value quite sometimes, we have to show content based on that.

app.compoenent.html
--------------------
<div class="row" [ngSwitch]="value">
    <div class="col-md-12">
      <!-- one of the below paragraph is shown based on ngSwitchCase -->
      <p *ngSwitchCase="10">Value is 10</p>
      <p *ngSwitchCase="20">Value is 20</p>
      <p *ngSwitchCase="50">Value is 50</p>
      <p *ngSwicthDefault>Value is default</p>
    </div>
  </div>


 here v bind the value property to ngSwitch.
if value matches with below ngSwicthCase value then the corresponding 
paragraphi s shown.


-- ngSwicth is no used much compared tp ngIf.


