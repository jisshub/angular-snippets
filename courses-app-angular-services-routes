coureses.model.ts
-----------------
export class Courses{
    constructor(public name: string, public amount: number){
        this.name = name;
        this.amount = amount;
    }
}


courses.srevices.ts
------------------
import { Injectable, EventEmitter } from "@angular/core";
import { Courses } from './courses.model';

@Injectable () export class CourseService{

    // courseChanged = new EventEmitter<Courses[]>();

    courses: Courses[] = [];

    // define a method and pass data,

    addingCourses(fetchData: {name: string, amount: number}){
        // push the data to courses array of Courses[]
        this.courses.push(new Courses(fetchData.name, fetchData.amount))
    }
}


cousres-edit.compoentn.html
--------------------------
<div class="row mt-4">
    <div class="col-md-12">
        <h1 class="display-6">Add Course</h1><hr>
        <form>
            <div class="form-group">
                <label for="name">Course Name</label>
                <input type="text" name="name" id="name" class="form-control" #getCourse>
            </div>
            <div class="form-group">
                <label for="amount">Course Amount</label>
                <input type="number" name="amount" id="amount" class="form-control" #getAmount>
            </div>
            <div class="form-group">
                <button class="btn btn-block btn-outline-success" (click)="onSubmit()" type="button">Add</button>
            </div>
        </form>
    </div>
</div>

cousres-edit.component.ts
------------------------
import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { CourseService } from '../cousrses.service';

@Component({
  selector: 'app-courses-edit',
  templateUrl: './courses-edit.component.html',
  styleUrls: ['./courses-edit.component.css']
})
export class CoursesEditComponent implements OnInit {

  @ViewChild('getCourse', {static: true}) name: ElementRef;
  @ViewChild('getAmount', {static: true}) amount: ElementRef;

  // inject courseService here
  constructor(private courseService: CourseService) { }

  ngOnInit(): void {
  }
  // apss the name and amount to addinfCOurse as arguments
  onSubmit(){
    // invoke addingCOurses here
    this.courseService.addingCourses({
      name: this.name.nativeElement.value,
      amount: this.amount.nativeElement.value
    })
  }

}

coures.cmponent.html
------------------
<div class="row">
    <div class="col-md-12">
        <app-courses-edit></app-courses-edit>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <ul class="list-group">
            <li class="list-group-item" *ngFor="let course of courses">{{course.name}} - {{course.amount}}</li>
        </ul>
    </div>
</div>


coureses.component.ts
-----------------------

import { Component, OnInit } from '@angular/core';
import { Courses } from './courses.model';
import { CourseService } from './cousrses.service';

@Component({
  selector: 'app-courses',
  templateUrl: './courses.component.html',
  styleUrls: ['./courses.component.css'],
  providers: [CourseService]
})
export class CoursesComponent implements OnInit {

  // define a courses arrary of Cousres type
  courses: Courses[] = [];

  constructor(private getCourseService: CourseService) { }

  ngOnInit(): void {
    this.courses = this.getCourseService.courses;
  }

}


Trainers Compoenent
---------------	
+
trainers,models.ts
--------------
export class Trainers{
    constructor(public name: string, public course: string)   {
        this.name = name;
        this.course = course;
    }
}


trainers.service.ts
--------------------
export class TrainersService {

  constructor() { }

  // create a trainers array of type Trainers
  trainers: Trainers[] = [];

  // define a method that accepts an object - push name, course to trianers array 
  addTrainers(trainerData: {name: string, course: string}){
    this.trainers.push({
      name: trainerData.name,
      course: trainerData.course,
    })
  }
}


trianers.compoenent.ts
--------------------
@Component({
  selector: 'app-trainers',
  templateUrl: './trainers.component.html',
  styleUrls: ['./trainers.component.css'],
  // provide the serbices here
  providers: [TrainersService]
})
export class TrainersComponent implements OnInit {

  // inject service instnce here
  constructor(private trainerServ : TrainersService) { }

  // create a an rray of tyoe Triners
  trainersArr: Trainers[] = [];

  ngOnInit(): void {
    // assign the tratiners array ofsrvices to trianerArr here
    this.trainersArr = this.trainerServ.trainers; 
  }
}

trainers,compoenrn.html
----------------------------
<div class="row">
    <div class="col-md-12">
        <ul class="list-group">
            <li class="list-group-item" *ngFor="let eachTrainer of trainersArr">{{eachTrainer.name}} - {{eachTrainer.course}}</li>
        </ul>
    </div>
</div>


trianer-edit.component.html
-----------------------------

<div class="row mt-4">
    <div class="col-md-12">
        <h1 class="display-6">Add Trainers</h1><hr>
        <form>
            <div class="form-group">
                <label for="name">Trainer Name</label>
                <input type="text" name="name" id="name" class="form-control" #getTrainer>
            </div>
            <div class="form-group">
                <label for="course">Course</label>
                <input type="text" name="course" id="course" class="form-control" #getCourse>
            </div>
            <div class="form-group">
                <button class="btn btn-block btn-outline-success" (click)="onSubmitTrainer()" type="button">Add</button>
            </div>
        </form>
    </div>
</div>

trainer-edit.compoenent.ts
--------------------------
export class TrainersEditComponent implements OnInit {

  // access the input element here
  @ViewChild('getTrainer', {static: true}) trainerName: ElementRef;
  @ViewChild('getCourse', {static: true}) trianerCourse: ElementRef; 

  // inject the srvuce to this component
  constructor(private trainerServ: TrainersService) { }

  ngOnInit(): void {
  }
  // pass the accessed input data to add Trainers as object
  onSubmitTrainer(){
    this.trainerServ.addTrainers({
      name: this.trainerName.nativeElement.value,
      course: this.trianerCourse.nativeElement.value
    })
  }
}

setting routes:
------------------

App.mofules.ts
--------------

//define routes
export const routes: Routes = [
  {path:'', component: HomeComponent},
  {path:'courses', component: CoursesComponent},
  {path: 'trainers', component: TrainersComponent},
]


@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    CoursesComponent,
    CoursesEditComponent,
    TrainersComponent,
    TrainersEditComponent,
    HeaderComponent
  ],
  imports: [
    BrowserModule,
    //registee the routes with angular app
    RouterModule.forRoot(routes),
  ],


app.compoennt.ts
-----------------

  <div class="container">
    <app-header></app-header>

    //specify router-outlet directive
    <router-outlet></router-outlet>

  </div>


header.compoenent.html
----------------------
 <li class="nav-item active">

                    <!-- give router link to navigate to diffrent routes-->
                <a class="nav-link" [routerLink]="['/']" routerLinkActive="router-link-active" >Home</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" [routerLink]="['/courses']" routerLinkActive="router-link-active" >Courses</a>
                </li>
                <li class="nav-item">
                    <a [routerLink]="['/trainers']" routerLinkActive="router-link-active"  class="nav-link">Trainers</a>
                </li>
                