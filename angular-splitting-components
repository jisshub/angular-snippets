splittinh applicaton to diff compoenent
----------------------------------------

server.component.html
-----------------------
<div class="card-title">{{ element.name }}</div>
<div class="card-text">
  <p>
    <strong *ngIf="element.type === 'server'" style="color: red">{{ element.content }}</strong>
    <em *ngIf="element.type === 'blueprint'">{{ element.content }}</em>
  </p>
</div>

server.component.ts
------------------------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-server',
  templateUrl: './server.component.html',
  styleUrls: ['./server.component.css']
})
export class ServerComponent implements OnInit {
  // define a element property.
  element: {name:string, content:string};
  constructor() { }

  ngOnInit(): void {
  }

}

error
-------------------
here this element property is specific for server component only.

app.component.ts
---------------------

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  serverElements = [{type: "server",
                    name:"test server",
                    content: "sample content"}];
}


app.component.html
---------------------
<div class="container">
  <app-cockpit></app-cockpit>
  <hr>
  <div class="row">
    <div class="col-lg-12">
      <div
        class="card card-body mb-2"
        *ngFor="let serverElement of serverElements">
        <!-- bind element property of server.component.ts and store
        each server element object -->
          <app-server [element]="serverElement"></app-server>
      </div>
    </div>
  </div>
</div>


-- we cant access the properties of a component from outside the
component.
ie. we cant accesss it from other components.

to make this happen, ie to allowother components o access the property.
we have to use input deorator before component.



server.compoenent.ts 
---------------------------
export class ServerComponent implements OnInit {

  @Input()
  element: {type:string, name:string, content:string};
  constructor() { }

  ngOnInit(): void {
  }

}

// attach a input decorator to the element property-
// will make it available outside this component

// <!-- so any component accessing the element property will be 
// able to use this element property of ServerComponent class-->

  

Assigning an alias to custom properties
-------------------------------------------
if some changes happen in our child component and now want to inform 
that change to our parent component.

ie. we have to inform our app component when new server is created.

to do that,

app.component.ts
------------------
add two functoin to be executed afetr button click

  OnServerAdded(){
      this.serverElements.push({
      type: 'server',
      name: this.newServerName,
      content: this.newServerContent
    });
  }
  OnBluePrintAdded(){
      this.serverElements.push({
      type: 'server',
      name: this.newServerName,
      content: this.newServerContent
    });
  }

 here serverName and serverContent properties r not available in app component,
we have to pass both that from cockpit component to app component.
the appcomponent also manages the serverArrays so have to pass both to app component.

to do that



app.component.html
---------------------
<app-cockpit (serverCreated)="OnServerAdded($event)"></app-cockpit>

so here v have to assign a custom event to app-cockpit which invokes
OnServerAdded() that defined in app component once event occurs. the function also gets an object as argument.
that object containes properties such as server name and content.


app.componet.ts
-----------------------
-- here serverData parameter is a type object with serverName and serverContent as its properties.

-- noe we can access this properties and assign it to name and content.

  OnServerAdded(serverData: {serverName: string, serverContent: string}){
      this.serverElements.push({
      type: 'server',
      name: serverData.serverName,
      content: serverData.serverContent
    });
  }


-> replicate this method for blurprintAdded()

APP.COMPONE.HTML
----------
<app-cockpit 
  (serverCreated)="OnServerAdded($event)"
  (bluePrintCreated)="OnBluePrintAdded($event)">
</app-cockpit>


APP.COMPONENT.TS
--------------------
  OnBluePrintAdded(blueprintData: {serverName: string, serverContent: string}){
      this.serverElements.push({
      type: 'server',
      name: blueprintData.serverName,
      content: blueprintData.serverContent
    });
  }



Binding to custom evnets
---------------------
 next we have to put our custom events in cockpit.component.ts
 ------------------------------------------------
 here v have to create two propwerties(serverCreated, bluePrintCreated) which are event emitters,

 export class CockpitComponent implements OnInit {
 	-- make this an event by usng built in EvetntEmiiter class.
	-- use @Ouput() before each event emitter, since v r outputting this events to our app component.

    @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();
    @Output() bluePrintCreated = new EventEmitter<{serverName: string, serverContent:string}>();

	-- specify type of data to be passed while object creation
    -- here v pass () at end to call constructor of EventEmiiter and then create eventemitter object.

	 // these eventemitters are objects in angular which allows to emit our 
  // own custom events

  newServerName = '';
  newServerContent = '';
  constructor() { }
}


cockpit.component.ts
---------------------
onAddServer() {
    // emits a  serverCreated event with an object as its arguments
    this.serverCreated.emit({
      serverName: this.newServerName, 
      serverContent: this.newServerContent
    });
  }

  onAddBlueprint() {
    // emits a blueprintcreted event with an object as it arguments
    this.bluePrintCreated.emit({
      serverName: this.newServerName, 
      serverContent: this.newServerContent
    })
  }



assigning an alias to custom events
-------------------------------------
// we can even assign alias to our custom event.
  
@Output('bpCreated') bluePrintCreated = new EventEmitter<{serverName: string, serverContent:string}>();

and use this alias insted of event emiiter in app component
s 




