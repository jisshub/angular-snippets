recipee.service.ts
------------------

copy the recipeeList array of Recipee type from recipee-book.ts,

import { Recipee } from '../recipee.model'

export class RecipeeService{
	

recipeeList: Recipee[] = [
    // instantiate Recipee class - pass arguments
    new Recipee("a test recipee for all", "a delicious recipee for all", 
    "https://www.andiemitchell.com/wp-content/uploads/2011/01/baked-buffalo-chicken-rolls-1-680x477.jpg"),
    new Recipee("a test recipee for all", "a delicious recipee for all", 
    "https://www.andiemitchell.com/wp-content/uploads/2011/01/baked-buffalo-chicken-rolls-1-680x477.jpg"),
    new Recipee("a new test recipee", "lorem ipsum", "https://www.andiemitchell.com/wp-content/uploads/2011/01/baked-buffalo-chicken-rolls-1-680x477.jpg")
  ];	

  // now get the copy of recipeeList
  getRecipee(){
  	return this.recipeeList.slice();
  }
}


> now add the recipee service in recipee.component.ts
	

recipee.component.ts
-----------------
providers = []


so now it is accessible everywhere in the recipee component,

recipee-book.compoentn.ts
-------------------------

recipee: Recipee[];

inject an instance of RecipeeService that is added in recipee compoenent

constructor(private recipeeService: RecipeeService){}

define ngOnInit() and access the method of RecipeeService

  // assign the array returned from recipee service to recipeeList propety defined  // here

ngOnInit(){
	this.recipee = this.recipeeService.getRecipee();
}


Thus v create a service for recipee and inject it to recipee compoenent
to be accessibe across it's child components.


Using service for cross component communication
----------------------------------------

recipee-item.compoenent.ts
-------------

> remove @Output() from recipee-item.compoenent.ts

> remove emit() 

> create a event emitetr object of type Recipee in recipee.service.ts

recipee.serbice.ts
--------------------

recipeeSelected = new EvenEmiiter<Recipee>();


recipee-item.component.ts
--------------------
> later inject recipee service instance of RecipeeService here, use construtor()

> emit recipee element.

@Input() recipeeEl: Recipee;

onRecipeeData(){
	this.recipeService.recipeeSelected.emit(recipeeEl)
}


remove onRecipeeSelected() from recipee-book.component.ts

also remove from recipee.book.component.html where v binded it as event.

also remove @Ouput() event emitetr from recipee.book.component.ts

> remove from event binding from app-recipee-book selector from 		'recipee.component.html'


> later inject recipeeService instance in recipee.component.ts


constructor(private recipeeService: RecipeeService){
	
}


> now listen the data emitted by recipee-item.compoenent

> use suscribe - get recipee Emited - assign that recipee to selectedRecipee property

ngOnInit(){
	this.recipeeService.recipeeSelected.subscribe(
		(recipee: Recipee)=> {
			this.selectedRecipee = recipee
		}

	)
}




Adding the shopping List service
-----------------------------

shopping-list.service.ts
----------------------

import { Injectable } from "@angular/core";
import { Ingredient } from "../shared/ingredient.model";

@Injectable() export class ShoppingListService{

    // create an ingredients property of type Ingredient type
    ingredients: Ingredient[]=[];

    // define a method na dpass data
    addingIngredients(getData: {name: string, amount: string}){
        this.ingredients.push(new Ingredient(getData.name, getData.amount))
    }
    
}   

 shopping-list.component.ts
 ------------------------

// inject shoppingService instance
constructor(private shoppingService: ShoppingListService) {}


> remove onIngData() from shopping-list.component.ts
> remove event binding from both templates

add the following,

  ngOnInit(): void {
    this.ingredients = this.shoppingService.ingredients;
  }


shoppinf-list.componeent.ts
----------------------------------

@Component({
  selector: 'app-shopping-list',
  templateUrl: './shopping-list.component.html',
  styleUrls: ['./shopping-list.component.css'],
  providers: [ShoppingListService]
})
export class ShoppingListComponent implements OnInit {
  
    // create an ingredients array of type Ingredient class
    ingredients: Ingredient[]=[];

    // inject shoppingService instance
    constructor(private shoppingService: ShoppingListService) {}

  ngOnInit(): void {
    this.ingredients = this.shoppingService.ingredients;
  }

}


shopping-list-edit.component.ts
----------------------------
remove @output and emit(),


inject the shoppingService service instance to contrsutpr

  constructor(private shoppingService: ShoppingListService) { }

    onAddIngredients(getIngName: HTMLInputElement, getIngAmount: HTMLInputElement){

    this.shoppingService.addingIngredients({
      name: getIngName.value,
      amount: getIngAmount.value
    })

  }

  onAddIngrediesnt is executd whuile button click,


complete code 
---------------------  
export class ShoppingListEditComponent implements OnInit {

  constructor(private shoppingService: ShoppingListService) { }

  ngOnInit(): void {
  }
  onAddIngredients(getIngName: HTMLInputElement, getIngAmount: HTMLInputElement){

    this.shoppingService.addingIngredients({
      name: getIngName.value,
      amount: getIngAmount.value
    })

  }
}


Adding Ingredient to recipees
-----------------------

recipee.model.ts
-------------------
import Ingredient model here

add ingredients property here,

public ingredient: Ingredient[]

pass imgredient in constructor,

constructor(ingredient: Ingredient[]){
	this.ingredient = ingredient;
}


later in recipee.service.ts  add ingredients to array,

recipee.serice.ts
-----------------------
private recipeeList: Recipee[] = [
        // instantiate Recipee class - pass arguments
        new Recipee("a test recipee for all", "a delicious recipee for all", 
        "https://www.andiemitchell.com/wp-content/uploads/2011/01/baked-buffalo-chicken-rolls-1-680x477.jpg", [new Ingredient("sdasd", '23213'), new Ingredient("asdsad", "2432")]),

        new Recipee("a test recipee for all", "a delicious recipee for all", 
        "https://www.andiemitchell.com/wp-content/uploads/2011/01/baked-buffalo-chicken-rolls-1-680x477.jpg", [new Ingredient("das", "dasda"), new Ingredient("adas", "123")]),

        new Recipee("a new test recipee", "lorem ipsum", "https://www.andiemitchell.com/wp-content/uploads/2011/01/baked-buffalo-chicken-rolls-1-680x477.jpg", [new Ingredient('asdasd', '333'),
        new Ingredient("adasd", "33")])
      ];


recipee-details.component.html
------------------------------

<div class="row">
    <div class="col-md-4">
      <ul class="list-group">
          <!-- loop thru ingredients -->
          <li class="list-group-item" *ngFor="let item of recipee.ingredients"> 
              {{item.name}} - {{item.amount}}
          </li>

      </ul>
    </div>
</div>

> loop thru ingredient and fetch name and amount,



send the ingredient to shopping list
--------------------------------

ie. when clikcing on 'To Shopping List' dropdown

we have to send ingredients to shoppingList

recipee-details.compoenent.html
-------------------------------
<a (click)=onAddShoppingList() class="dropdown-item" href="#">To Shopping List </a>

recipee.detail.component.ts
------------------------------
inject recipee servicehere,

constructor(private recipeeService: RecipeeService){}

onAddShoppingList(){
	
}

recipee.service.ts
------------------
add new method here that has a ingredient type as parameter, 

      // define a method of ingredienrt type.
      
onPassIngredientToShopList(ingredient: Ingredient[]){

}

recipee-details.compoenent.,ts
---------------------------
	  // below method fires on clickinf link

onAddShoppingList(){

	pass recipee.ingredients here to a method defined in recipee.service.ts

    // invoke method of recipee service - pass ingredients as arguments to it
   
   this.recipeeService.onPassIngredientToShopList(this.recipee.ingredients); 
}

> next in recipee.service we have to access the shopping List service.

ie we r injecting shoppinglist srvice to recipee service.

add @Injectable() to recipee service.ts
 befreo export class


 recipee.service.ts
 ---------------------

   constructor(private shoppingService: ShoppingListService){}

       onPassIngredientToShopList(ingredient: Ingredient[]){
        this.shoppingService.ingredients
      }


   shopping-list.service.ts
   ---------------------------
ingredientsChanged = new Ev

   create a new method that receives ingredients

   addIngredient(ingredient: Ingredient[]){
   			// make a copy of array using spread and push it
   			this.ingredient.push(...ingredients)
   			this.ingredientsChanged.emit(this.ingredients.slice());
   }
      

   recipee.service.ts
   --------------------

        onPassIngredientToShopList(ingredient: Ingredient[]){
        this.shoppingService.addIngredient(ingredient);
      }











