install angular cli
> npm install -g @angular/cli
creaye new project
> ng new my-first-app
> cd my-first-app
start the angular developement server
> ng serve
	- builds and serves the app.



common error while installing and creating new angular project
--------------------
NPM Install Error:Unexpected end of JSON input while parsing near '…nt-webpack-plugin“:”0'

solution:
> npm cache clean --force




 -- code is written in src folder

src
	- app
		- app.componnets.html
		- app.components.css
		- app.module.ts
		- app.component.ts

app.componnets.html - where v write our page contents
app.component,.css  - where v write the css
app.module.ts - typescript code - importing modles, packages 

Example
----------------
app.components.html file
----------------------------
<input type="text" [(ngModel)] ="name">
<p>{{ name }}</p>

[(ngModel)] is used for two way binding in Angular

here [(ngModel)] - angular property - gets the input and store in name model. later o/p value of name model below. to do it, import module.

app.module.ts
----------------------------
import FormsModule from angular forms

import { FormsModule } from "@angular/forms";

-- add the module to imports:

imports: [
    BrowserModule,
    FormsModule
  ]



usig bootstrap styling
-----------------------
> cd ny-first-app

> npm install bootstrap --save

- angular.json file
	- styles array
		-overwrite the defaul style
like this,

	 "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ]

  save the file and run, 
  > ng serve

 to verify it open developer tools - elements -style tag



@Component(){}
-------------------
Component(obj: Component): TypeDecorator

Decorator that marks a class as an Angular component and provides configuration metadata that determines how the component should be processed, instantiated, and used at runtime.

eg:
import { Component } from '@angular/core';

@Component({
    selector: "app-server",
    templateUrl: "./server.component.html",
})
export class ServerComponent{
}

here @Component marks ServerComponent class as an angular component



register ServerCompounent with angular
---------------------------------------------

app.modules.ts
-----------------

@NgModule({
  declarations: [
    AppComponent,
    ServerComponent,
  ]

add new components to the declarations property


note: 
never add selectors in the new component to the index.html since it doesnt works.


creating servers component with cli
----------------------------
> ng generate component servers
> check whether it is imported and added to declartions array in app.module.ts
> add html contents to servers.componenets.html file
> add the servers component selector as html element in app.component.html
		<app-severs></app-servers>

> save :)



@Component({
  selector: 'app-servers',

  // below r two diff ways using selectr

  1. by using css attribute selector
  // selector : '[app-servers]',

  app.components.html
  ------------------
  <div app-servers></div>

  2. using css class selector
  // selector: '.app-servers',


  app.components.html
  ------------------
  <div class= "app-servers"></div>


  Componenet creation manually
  -----------------------------

  > navigate to app folder
  > mkdir -v componentdir 
  		if component name is composed of 2 words, eg: successalert
  		create component name as success-alert

  > cd componentdir
  > touch componentdir.component.html componentdir.component.css componentdir.component.ts
  > in componentdir.component.ts, add the following

  	import { Component } from "@angular/core" -- not neccessary to give since it will be imported automatically once v define @Component
  	
  	@Component({

  		selector: "app-componentdir",
  		templateUrl: "./componentdir.component.html",
  		styleUrls: "[./componentdir.component.css]"
  	})

  	export class ComponentDirComponent{

  	}

  > app.module.ts

  	import { ComponentDirComponent } from ./componentdir/componentdir.component

  	declarations: [AppComponent, 
  				   ComponentDirComponent
  				  ]

  > add some content in html file and style it in css file of new component.
  > add selector property of new component as html element in app.components.html file like,

  		<selector></selector>



typescript code
----------------------


export class ServersComponent implements OnInit {
  newServers: boolean = true;
  serverInfo: string;
  usageLimit: string = "start using";
  constructor() { 
    setTimeout(()=>{
      this.newServers = false;
    } ,2000), 
    this.serverInfo = "bad server all day",
    
    setTimeout(() => this.usageLimit = "stop using it", 5000);
  };

  ngOnInit(): void {
  }

}

html template
-------------------------
<!-- using property binding -->
<button class="btn btn-primary mt-3 mb-3" [disabled]="newServers">Add Server</button>

<!-- using string interpolation -->
<p> {{serverInfo}} </p>

<!-- using property binding for constantly changing data-->
<p [innerText] = "usageLimit" id="para-1"></p>

<!-- here innerText is a dom property used to show 
content in b/w the tags -->
  using string interpolation
  --------------------------
  {{ }}

  anytihing that goes in this curly braces should return a string at end or those that can be convrted to string.
  it can be methods(should return a string/number as output), constants, numbers(converted to strings)
  cant use loops, conditionals, ...

1. {{ data }} -- resulting data 

2. {{ getValue() }} -- method

3. {{ "stringvalue" }} -- hardcoded strings
	
  


	Event Binding
	---------------

	<button class = "btn btn-primary" (click) = "method()">Add Item</button>

	here when v click the button the method() is invoked. 

	'click' is the event.


	-- target is a property of input event

		to get the value of input text
			> event.target.value;


passing data with event binding
--------------------------------------

<label for="server-name" class="font-weight-bold">Server Name: </label><br>
<input type="text" class="form-control"
(input) = "OnGetInputData($event)">

<!-- get the input here -->
<p class="font-weight-bold mt-2">{{ textInput }}</p>

-- (input) = "OnGetInputData($event)
	
	here v use input event, $event is variable that accept the input value entered and pass it as argument with the method.

	component.ts
	-------------

	  OnGetInputData(eventData: any): void{
    // get the input value
    this.textInput = eventData.target.value;
  }


  
two way binding (combining prpoerty and event binding)
------------------------

<input type="text" class="form-control"
[(ngModel)]="serverVersion">

<!-- using variable serverVersion here -->
<p class="lead mt-2">server version is {{ serverVersion }}</p>


ngModel - a directive that binds the user inputs.  and stores it in a variable

[(ngModel)] = "serverVersion"

here 'serverVersion' is a variable that store the user input binded by ngModel
and that input is binded is by ngModel.

then v can use thias variable in our template. like below:
	<p>{{ serverVersion }}</p>

	the user value stored in serverVersion is updated when ever user gives new input.
	and it reflects everywhere in thepage where v use 'serverVersion' variable


disabled attribute
------------------------

1. property binding

	[disabled] = "!variable"

if the variable is not present, so !variable is true, thus element is disabled, else enabled.


ngIf directive
---------------------

-- to remove/add the element based on a condition.


Example: 

component.html
------------------
<input type="text" class="form-control"
[(ngModel)] = "textData">
<button class="btn btn-warning m-2"
[disabled]='!textData'
(click)="OnClickBtn()">Add Data</button>

<!-- add p element only if button is clicked -->
<p *ngIf="value1">Data is {{ textData }}</p>
<!-- this value1 holds either true/false -->
<!-- once page reloads p element is removed from dom -->
<!-- this is what ngIf does - removes/add element based on condition -->
<!-- button click is the condition here -->

component.ts
--------------
class{
	value1: string;

	OnClickBtn(): void{
      this.value1= true;
      // this value1 variable is passed to ngIf
  }	
}
  
  
using ngStyle directive
------------------------
ngstyle is an attribute directive.

 ngStyle allows to dynamially change styles of an element
based on condition 
 here ngStyle is binded with a js object where v specify the styles
for the paragraph 

<p [ngStyle] = "{backgroundColor: getBgColor()}" 
class="font-weight-bold mt-4">Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur, dolorum?</p>

component.ts
getBgColor(){
    if (this.randomValue === "online") {
      return "red";
    } else {
      return "green"
    }
  }
  
passgin multiple properties
---------------------------------
[ngStyle] = "{border: '3px solid', backgroundColor: 'dodgerblue'}"




using ngClass directive 
---------------------------------------

<!-- ngClass is a built in attribute that attaches 
to an element only when a condition is true -->

server.component.html
------------------------
<p class="lead mt-4"
[ngClass]="{premium_style: classType==='premium'}"
>This is {{ classType }} class.</p>

<!-- here ngClass binds a js object
with css class as key and a condition as its value -->
<!-- if classType property is premium, then v attach css class 'premium_style' to the paragraph element -->
<!-- else style is not attached -->


server.component.css
-------------------
.premium_style{s
    background-color: dodgerblue;
}

Example: 
----------------
<p [ngClass]="{'white-text': data>=10}">Hello</p>

here v must use '' if css class use hyphen b/w them.

.white-text{
	color: "white";

}



using ngFor directive
--------------------------
<!-- here serverList is an array -loop thru it - fetch each item
and output it in the element using string interpolation - if 5 elements in array - 
then p element will be shown 5 times -->

--here v use for...of loop

server.component.html
---------------------
<p *ngFor="let server of serverList" class="text-success mt-3">{{server}}</p>

server.component.ts
-----------------------
constructor(){
	 this.serverList = ["server1", "server2", "server3"];
}

toggle button to hide and show element
-----------------------------------------

<button class="btn btn-primary m-3"
(click)="OnBtnClick()">Display Details</button>
<!-- show paragraph only if button is clicked, use ngIf --> 
<p *ngIf="isShow" class="m-3">Secret Password is {{secretPassword}}</p>
<!-- if we click button again, paragraph is removed, since ngIf will be false on another click -->
<br>

class{

	isShow: false


  OnBtnClick(): string{
    // reverse the isShow property on each click
    this.isShow = !this.isShow;
    this.secretPassword = "jiss#45@01";
    return this.secretPassword;
  }


extracting the index of ngFor directive
---------------------------------------
ngFor = "let logItem of logs; let i = index"

here index is a reserved word which gives access to index of current
iteration. 

Example
--------------
in first iteration, index is 0,
in 2nd iteration, index is 1,

component.html
-------------
<p *ngFor="let eachClick of clickDataArray; let i = index" 
[ngStyle]="{backgroundColor: i>=5? 'red':'blue'}"
></p>

-- here if i>=5, then p gets a bgcolor of red else blue



using local reference to element instead of two way binding
-------------------------------------------------------------
here v set a local reference to html element,

syntax:
	#localreference 

<input type="text" name="user" #userName>

here userName acts as a reference to this input element
we can use this reference in template but not in ts code directly,

we can pass it as argument while funciton call,
eg:
(click)="OnBtnClick(userName)"


in ts code,

	OnBtnClick(getUserName: HTMLInputElement){

		// we can get the value of element we refered using value attribute
		console.log(getUserName.value)
	}

getUserName is of type HTMLInputElement.



@ViewChild() in Angular 8+
----------------------------
In Angular 8+, the @ViewChild() syntax which you'll see in the next lecture needs to be changed slightly:

Instead of:

@ViewChild('serverContentInput') serverContentInput: ElementRef;
use
 
@ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;
The same change (add { static: true } as a second argument) needs to be applied to ALL usages of @ViewChild() (and also @ContentChild() which you'll learn about later) IF you plan on accessing the selected element inside of ngOnInit().

If you DON'T access the selected element in ngOnInit (but anywhere else in your component), set static: false instead!

If you're using Angular 9, you only need to add { static: true } (if needed) but not { static: false }.


in practice,

@viewChild used to get access to any element firectly from ts code.


@viewchild('selector', {static: true}): ElementRef

@ViewChild - built in decorator
selector - will be a local reference set on element v trying to access
{static: true} - enthutanaavo
ElementRef: type 

Example
--------------
cockpit.component.ts
-----------------------
class Component{

	@ViewChild("serverDate", {static: true}) serverDateInput: ElementRef;

}

to get the value of element v are accessing,

function()(

	console.log(this.serverDateInput.nativeElement.value)
)

using ng-content directive
---------------------------

server.component.html
------------------------
<div class="card-title">{{ element.name }}</div>
<div class="card-text">
  <ng-content></ng-content>
</div>

app.component.html
---------------

<app-server [myElement]="serverElement">
            <p>
              <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.content }}</strong>
              <br>
              <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.date }}</strong>
          
              <em *ngIf="serverElement.type === 'blueprint'" style="color: blue">{{ serverElement.content }}</em>
              <br>
              <em *ngIf="serverElement.type === 'blueprint'" style="color: blue">{{ serverElement.date }}</em>
            </p>
 </app-server>

here all the content between app-server tags in appcomponent  is projected to the ng-content
tags placed in the server cmponent.

ie we are projecting the contents of parent component(app component) into the child component(server component)
by placing ng-content directive.



LifeCycle hooks  
---------------------
export class AppComponent implements OnChanges, AfterContentInit, AfterContentChecked, AfterViewInit, 
AfterViewChecked{
  ngOnChanges(changes: SimpleChanges): void{

  }
  title = 'lifecycle-hooks-app';
  constructor(){
    alert("1. on chnages called");
  }
  ngDoCheck(): void{
    alert("3. do check is called!")
  }

  ngAfterContentInit(): void{
    alert("4. after content init called");
  }
  ngAfterContentChecked(): void{
    alert("5. afetr content projected is checked")
  }
  ngAfterViewInit(): void{
    alert("6. after view init is called")
  }

  ngAfterViewChecked(): void{
    alert("7. after view is checked")
  }

  ngOnDestroy(): void{
    alert("8. on destroy is called")
  }
  
}

// ngOnChanges()
// This hook is basically called after the constructor is called and any other time there is a property change inside your component.here alert will pop up before the component is loaded.



// ngDoCheck()
//  It is called during every change detection run, Angular has an internal system that goes around the component processes every so often looking for changes that the compiler cannot detect on its own. This hook is called at every change detection run, usually after the ngOnInit hook is called.

//ngAfterContentInit()

// this hook is called afetr ng-content.
// ie afetr projecting contents to chils component from root component.


// ngAfterContentChecked()

// this hook is called after AfterContentInit is called, also after DoCheck() is called.

//ngAfterViewInit()
// called after component view and its
// subsequent view has been initialized.

// ngAfterviewChecked()
// called after ngAfterViewInit() and ngAfterContentChecked().

// ngOnDestroy()
// called once a component is destroyed


// NOTE:
// ngDoCheck, ngAfterContentChecked and ngAfterViewChecked hooks to be called multiple times as changes occurs in the component.a


@ContentChild() in Angular 8+
-----------------------------------
In Angular 8+, the @ContentChild() syntax which you'll see in the next lecture needs to be changed slightly:

Instead of:

@ContentChild('contentParagraph') paragraph: ElementRef;
use

@ContentChild('contentParagraph', {static: true}) paragraph: ElementRef;






























