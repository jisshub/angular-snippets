install angular cli
> npm install -g @angular/cli
creaye new project
> ng new my-first-app
> cd my-first-app
start the angular developement server
> ng serve
	- builds and serves the app.


 -- code is written in src folder

src
	- app
		- app.componnets.html
		- app.components.css
		- app.module.ts
		- app.component.ts

app.componnets.html - where v write our page contents
app.component,.css  - where v write the css
app.module.ts - typescript code - importing modles, packages 

Example
----------------
app.components.html file
----------------------------
<input type="text" [(ngModel)] ="name">
<p>{{ name }}</p>

here [(ngModel)] - angular property - gets the input and store in name model. later o/p value of name model below. to do it, import module.

app.module.ts
----------------------------
import FormsModule from angular forms

import { FormsModule } from "@angular/forms";

-- add the module to imports:

imports: [
    BrowserModule,
    FormsModule
  ]



usig bootstrap styling
-----------------------
> cd ny-first-app

> npm install bootstrap --save

- angular.json file
	- styles array
		-overwrite the defaul style
like this,

	 "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ]

  save the file and run, 
  > ng serve

 to verify it open developer tools - elements -style tag



@Component(){}
-------------------
Component(obj: Component): TypeDecorator

Decorator that marks a class as an Angular component and provides configuration metadata that determines how the component should be processed, instantiated, and used at runtime.

eg:
import { Component } from '@angular/core';

@Component({
    selector: "app-server",
    templateUrl: "./server.component.html",
})
export class ServerComponent{
}

here @Component marks ServerComponent class as an angular component



register ServerCompounent with angular
---------------------------------------------

app.modules.ts
-----------------

@NgModule({
  declarations: [
    AppComponent,
    ServerComponent,
  ]

add new components to the declarations property


note: 
never add selectors in the new component to the index.html since it doesnt works.


creating servers component with cli
----------------------------
> ng generate component servers
> check whether it is imported and added to declartions array in app.module.ts
> add html contents to servers.componenets.html file
> add the servers component selector as html element in app.component.html
		<app-severs></app-servers>

> save :)



@Component({
  selector: 'app-servers',

  // below r two diff ways using selectr

  1. by using css attribute selector
  // selector : '[app-servers]',

  app.components.html
  ------------------
  <div app-servers></div>

  2. using css class selector
  // selector: '.app-servers',


  app.components.html
  ------------------
  <div class= "app-servers"></div>


  Componenet creation manually
  -----------------------------

  > navigate to app folder
  > mkdir -v componentdir 
  		if component name is composed of 2 words, eg: successalert
  		create component name as success-alert

  > cd componentdir
  > touch componentdir.component.html componentdir.component.css componentdir.component.ts
  > in componentdir.component.ts, add the following

  	import { Component } from "@angular/core" -- not neccessary to give since it will be imported automatically once v define @Component
  	
  	@Component({

  		selector: "app-componentdir",
  		templateUrl: "./componentdir.component.html",
  		styleUrls: "[./componentdir.component.css]"
  	})

  	export class ComponentDirComponent{

  	}

  > app.module.ts

  	import { ComponentDirComponent } from ./componentdir/componentdir.component

  	declarations: [AppComponent, 
  				   ComponentDirComponent
  				  ]

  > add some content in html file and style it in css file of new component.
  > add selector property of new component as html element in app.components.html file like,

  		<selector></selector>



typescript code
----------------------


export class ServersComponent implements OnInit {
  newServers: boolean = true;
  serverInfo: string;
  usageLimit: string = "start using";
  constructor() { 
    setTimeout(()=>{
      this.newServers = false;
    } ,2000), 
    this.serverInfo = "bad server all day",
    
    setTimeout(() => this.usageLimit = "stop using it", 5000);
  };

  ngOnInit(): void {
  }

}

html template
-------------------------
<!-- using property binding -->
<button class="btn btn-primary mt-3 mb-3" [disabled]="newServers">Add Server</button>

<!-- using string interpolation -->
<p> {{serverInfo}} </p>

<!-- using property binding for constantly changing data-->
<p [innerText] = "usageLimit" id="para-1"></p>

<!-- here innerText is a dom property used to show 
content in b/w the tags -->
