add-user.compoememt.html
------------------
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <label for="firstName">FirstName</label>
            <input type="text" name="firstName" id="firstName"
            class="form-control" #firstName>
        </div>
        <div class="form-group">
            <label for="lastName">LastName</label>
            <input type="text" name="lastName" id="lastName"
            class="form-control" #lastName>
        </div>
        <div class="form-group">
            <label for="phone">Phone</label>
            <input type="number" name="phone" id="phone"
            class="form-control" #phoneNumber>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" (click)="onSubmit()">Add User</button>
        </div>
    </div>
</div>

add-user.ts
---------------
import { Component, OnInit, ViewChild, Output, EventEmitter, ElementRef } from '@angular/core';

@Component({
  selector: 'app-add-user',
  templateUrl: './add-user.component.html',
  styleUrls: ['./add-user.component.css']
})
export class AddUserComponent implements OnInit {

  @ViewChild('firstName' , {static: true}) first_name: ElementRef;
  @ViewChild('lastName', {static: true}) last_name: ElementRef;
  @ViewChild('phoneNumber', {static: true}) phone_number: ElementRef;
  @Output() emitUser = new EventEmitter<{firstName: string, lastName: string, phone: string}>()

  constructor() { }

  ngOnInit(): void {
  } 

  onSubmit(){
    this.emitUser.emit({
      firstName: this.first_name.nativeElement.value,
      lastName: this.last_name.nativeElement.value,
      phone: this.phone_number.nativeElement.value
    })
  
  }

}

app.compoememt.html
------------
<div class="container">
  <app-add-user (emitUser)="onGetUser($event)"></app-add-user>

  <div class="row">
    <div class="col-md-4">
      <table class="table table-stripped">
        <tr>
            <thead>
                <th scope="col">#</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">UserName</th>
            </thead>
        </tr>
        <tbody>
          <app-show-users 
          *ngFor="let userOne of allUsersArr; let i=index;" 
          [eachUser]="userOne"
          [num]="i+1"></app-show-users>
        </tbody>
      </table>
    </div>
  </div>

</div>


app.compoennt.ts
-----------------
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'user-info-app';
  // 
  allUsersArr: Array<{firstName: string, lastName: string, phone: string}>=[];

  onGetUser(fetchUser: {firstName: string,  lastName: string, phone: string}){
    this.allUsersArr.push({
      firstName: fetchUser.firstName,
      lastName: fetchUser.lastName,
      phone: fetchUser.phone
    })
    console.log(this.allUsersArr);
  }
}

show-user.compoennt.ts
----------------
import { Component, OnInit, Input } from '@angular/core';

@Component({
  selector: 'app-show-users',
  templateUrl: './show-users.component.html',
  styleUrls: ['./show-users.component.css']
})
export class ShowUsersComponent implements OnInit {

  @Input() num: number;
  @Input() eachUser: {firstName: string, lastName: string, phone: string}


  constructor() { }

  ngOnInit(): void {
  }

}

show-user,html
=---------------
<tr>
    <th scope="row">{{num}}</th>
    <td>{{eachUser.firstName}}</td>
    <td>{{eachUser.lastName}}</td>
    <td>{{eachUser.phone}}</td>
</tr>
    

    

 injecting loggin services to compoenent.
 -------------------------------
 loggin.service.ts
 -------------
 export class LoggingServices{
    getMeData(arrayData: {firstName: string, 
                          lastName: string,
                            phone: string}[]){
        arrayData.forEach((e)=> {
            console.log(`Name: ${e.firstName} ${e.lastName}, phone: ${e.phone}`)
        })
    }
}

app.compoenent.ts
-----------------
import { Component, Input } from '@angular/core';
import { LoggingServices } from './logging.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [LoggingServices],
})
export class AppComponent {
  title = 'user-info-app';
  
  // define a cnstructor to inform to get instance of LoggingServices class.
  constructor(private logService: LoggingServices){};

  allUsersArr: Array<{firstName: string, lastName: string, phone: string}>=[];

  onGetUser(fetchUser: {firstName: string,  lastName: string, phone: string}){
    this.allUsersArr.push({
      firstName: fetchUser.firstName,
      lastName: fetchUser.lastName,
      phone: fetchUser.phone
    })

    // call logServive and access the funciton in LogginService class
    this.logService.getMeData(this.allUsersArr);
  }
}


services
-----------
users.services.ts
------------------

> copy the allUsersArra from app component.ts to this file

export class UserServices{
    allUsersArr: Array<{firstName: string, lastName: string, phone: string}>=[
        {
          firstName: "jissmon",
          lastName: "jose",
          phone: "324234"
        },
        {
          firstName: "jerin",
          lastName: "george",
          phone: "77454564"
        },
        {
          firstName: "jacob",
          lastName: "george",
          phone: "28693123"
        }
      ];

    	 //   create a new method - push object to an array.
    addUser(firstName: string, lastName: string, phone: string){
        this.allUsersArr.push({firstName: firstName, lastName: lastName, phone: phone})
    }
}



app.compoenent.ts
------------------
  
  // define allUsersArr array
  allUsersArr: {firstName: string, lastName: string, phone: string}[] = [];


inject usersSerbices in to app compoenent
---------------------
constructor(private userService:UserServices){
	
}

@Compoenent({
	providers: [UserServices]	
})



  // defoinde ngOnit lifecyce hook
  ngOnInit(){
    // access allusersArr in userServices and assign it to alluserArr arary defined here
    this.allUsersArr = this.userService.allUsersArr;

  }


remove emit method and @output from add-user-component.ts

-----------------
add-user.ts
-------------

import { Component, OnInit, ViewChild, Output, EventEmitter, ElementRef } from '@angular/core';

@Component({
  selector: 'app-add-user',
  templateUrl: './add-user.component.html',
  styleUrls: ['./add-user.component.css']
})
export class AddUserComponent implements OnInit {

  @ViewChild('firstName' , {static: true}) first_name: ElementRef;
  @ViewChild('lastName', {static: true}) last_name: ElementRef;
  @ViewChild('phoneNumber', {static: true}) phone_number: ElementRef;


  constructor() { }

  ngOnInit(): void {
  } 

  onSubmit(){

  }

}

> instead we should need to inject our userServices here,
	
	@Component({
  selector: 'app-add-user',
  templateUrl: './add-user.component.html',
  styleUrls: ['./add-user.component.css'],
  providers: [UserServices],
})
	constructor(private usersrevices: userServices)



later , invoke addUser() of UserServbices class'
so by button click,  data is passed and sent to parameters of addUsers() 
in user.service.ts file.


  onSubmit(){

    // call the addUser() here -pass the argument from here.

    this.userService.addUser(this.first_name.nativeElement.value, this.last_name.nativeElement.value, this.phone_number.nativeElement.value)
  }



problem till here - if v click submit button new data not added to the table.
reason here v provide the userService to appcomponent and add-user-component.
same isntance of userService in appcomponent is avaiable to 
all its child component. add-user-component is a child app componen.

so here v overqrite the instance in add-user-component.

to fix this, 
remove the userServices from 'providers' propperty but not remove from constructor.

now issues is resolved and new data will be shown in table on submit event.







